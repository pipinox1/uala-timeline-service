// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	day_timeline_filled "uala-timeline-service/internal/domain/day_timeline_filled"

	mock "github.com/stretchr/testify/mock"

	posts "uala-timeline-service/internal/domain/posts"
)

// DayUserTimelineFilledRepository is an autogenerated mock type for the DayUserTimelineFilledRepository type
type DayUserTimelineFilledRepository struct {
	mock.Mock
}

// AddPosts provides a mock function with given fields: ctx, userID, post
func (_m *DayUserTimelineFilledRepository) AddPosts(ctx context.Context, userID string, post []posts.Post) error {
	ret := _m.Called(ctx, userID, post)

	if len(ret) == 0 {
		panic("no return value specified for AddPosts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []posts.Post) error); ok {
		r0 = rf(ctx, userID, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDayUserTimelineFilled provides a mock function with given fields: ctx, filter
func (_m *DayUserTimelineFilledRepository) GetDayUserTimelineFilled(ctx context.Context, filter day_timeline_filled.DayUserTimelineFilledFilter) (*day_timeline_filled.DayUserTimelineFilled, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetDayUserTimelineFilled")
	}

	var r0 *day_timeline_filled.DayUserTimelineFilled
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, day_timeline_filled.DayUserTimelineFilledFilter) (*day_timeline_filled.DayUserTimelineFilled, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, day_timeline_filled.DayUserTimelineFilledFilter) *day_timeline_filled.DayUserTimelineFilled); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*day_timeline_filled.DayUserTimelineFilled)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, day_timeline_filled.DayUserTimelineFilledFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePost provides a mock function with given fields: ctx, userID, post
func (_m *DayUserTimelineFilledRepository) RemovePost(ctx context.Context, userID string, post *posts.Post) error {
	ret := _m.Called(ctx, userID, post)

	if len(ret) == 0 {
		panic("no return value specified for RemovePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *posts.Post) error); ok {
		r0 = rf(ctx, userID, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePosts provides a mock function with given fields: ctx, userID, post
func (_m *DayUserTimelineFilledRepository) UpdatePosts(ctx context.Context, userID string, post *posts.Post) error {
	ret := _m.Called(ctx, userID, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePosts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *posts.Post) error); ok {
		r0 = rf(ctx, userID, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDayUserTimelineFilledRepository creates a new instance of DayUserTimelineFilledRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDayUserTimelineFilledRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DayUserTimelineFilledRepository {
	mock := &DayUserTimelineFilledRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
