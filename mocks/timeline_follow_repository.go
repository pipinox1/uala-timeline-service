// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	timeline "uala-timeline-service/internal/domain/timeline"

	mock "github.com/stretchr/testify/mock"
)

// TimelineRepository is an autogenerated mock type for the TimelineRepository type
type TimelineRepository struct {
	mock.Mock
}

// AddPostToUserTimeline provides a mock function with given fields: ctx, userID, timelinePost
func (_m *TimelineRepository) AddPostToUserTimeline(ctx context.Context, userID string, timelinePost timeline.PostTimeline) error {
	ret := _m.Called(ctx, userID, timelinePost)

	if len(ret) == 0 {
		panic("no return value specified for AddPostToUserTimeline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, timeline.PostTimeline) error); ok {
		r0 = rf(ctx, userID, timelinePost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserPostTimeline provides a mock function with given fields: ctx, userID, postId
func (_m *TimelineRepository) GetUserPostTimeline(ctx context.Context, userID string, postId string) (*timeline.UserTimeline, error) {
	ret := _m.Called(ctx, userID, postId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPostTimeline")
	}

	var r0 *timeline.UserTimeline
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*timeline.UserTimeline, error)); ok {
		return rf(ctx, userID, postId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *timeline.UserTimeline); ok {
		r0 = rf(ctx, userID, postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timeline.UserTimeline)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTimeline provides a mock function with given fields: ctx, userID, filter
func (_m *TimelineRepository) GetUserTimeline(ctx context.Context, userID string, filter timeline.TimelineFilter) (*timeline.UserTimeline, error) {
	ret := _m.Called(ctx, userID, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTimeline")
	}

	var r0 *timeline.UserTimeline
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, timeline.TimelineFilter) (*timeline.UserTimeline, error)); ok {
		return rf(ctx, userID, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, timeline.TimelineFilter) *timeline.UserTimeline); ok {
		r0 = rf(ctx, userID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timeline.UserTimeline)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, timeline.TimelineFilter) error); ok {
		r1 = rf(ctx, userID, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePostFromTimeline provides a mock function with given fields: ctx, userID, timelinePost
func (_m *TimelineRepository) RemovePostFromTimeline(ctx context.Context, userID string, timelinePost timeline.PostTimeline) error {
	ret := _m.Called(ctx, userID, timelinePost)

	if len(ret) == 0 {
		panic("no return value specified for RemovePostFromTimeline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, timeline.PostTimeline) error); ok {
		r0 = rf(ctx, userID, timelinePost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTimelineRepository creates a new instance of TimelineRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimelineRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TimelineRepository {
	mock := &TimelineRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
