// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	posts "uala-timeline-service/internal/domain/posts"

	mock "github.com/stretchr/testify/mock"
)

// PostRepository is an autogenerated mock type for the PostRepository type
type PostRepository struct {
	mock.Mock
}

// GetPostById provides a mock function with given fields: ctx, id
func (_m *PostRepository) GetPostById(ctx context.Context, id string) (*posts.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostById")
	}

	var r0 *posts.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*posts.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *posts.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MGetPosts provides a mock function with given fields: ctx, postIDs
func (_m *PostRepository) MGetPosts(ctx context.Context, postIDs []string) ([]posts.Post, error) {
	ret := _m.Called(ctx, postIDs)

	if len(ret) == 0 {
		panic("no return value specified for MGetPosts")
	}

	var r0 []posts.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]posts.Post, error)); ok {
		return rf(ctx, postIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []posts.Post); ok {
		r0 = rf(ctx, postIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]posts.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, postIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPostRepository creates a new instance of PostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostRepository {
	mock := &PostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
